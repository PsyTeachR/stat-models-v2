Creating models is all about defining relationships between variables. It's good to start with the simplest possible relationship: the relationship between two variables. In the next chapter, we'll quickly move on to talking about relationships between multiple variables. Before moving forward, you might want to review a few key statistical concepts.

::: {.callout-note collapse="true"}
## Quick review of key concepts

- [:scales of measurement (nominal, ordinal, interval, ratio)](glossary.qmd#measurement-scales)
- [:mean](glossary.qmd#mean)
- [:normal distribution](glossary.qmd#normal-distribution)
- [:standard deviation](glossary.qmd#standard-deviation)
- [:variance](glossary.qmd#variance)
- [:z-score](glossary.qmd#z-score)
:::

```{r}
#| label: fig-correlation-relationships
#| fig.width: 6
#| fig.height: 3
#| echo: false
#| message: false
#| fig.cap: "Different types of bivariate relationships."
library("tidyverse")

set.seed(1451)

.pos <- MASS::mvrnorm(500, c(0, 0), matrix(c(1, .6, .6, 1), ncol = 2))
.neg <- MASS::mvrnorm(500, c(0, 0), matrix(c(1, -.6, -.6, 1), ncol = 2))
.none <- MASS::mvrnorm(500, c(0, 0), matrix(c(1, 0, 0, 1), ncol = 2))

.mytib <- tibble(
  relationship = factor(c("negative", "none", "positive"),
                        levels = c("negative", "none", "positive")),
  data = list(tibble(x = .neg[, 1], y = .neg[, 2]),
              tibble(x = .none[ ,1], y = .none[, 2]),
              tibble(x = .pos[, 1], y = .pos[, 2]))
) |>
  unnest(data)

ggplot(.mytib, aes(x, y)) +
  facet_wrap(~ relationship,
             labeller = "label_both") + 
  geom_point(alpha = .1) +
  geom_smooth(method = "lm", se = FALSE) +
  coord_cartesian(xlim = c(-4, 4), ylim = c(-4, 4)) +
  coord_equal()
```

Let's start by simulating data representing hypothetical humans and their heights and weights. We know these things are correlated. What we need to be able to simulate data are means and standard deviations for these two variables and their correlation.

I found some data [here](https://www.geogebra.org/m/RRprACv4) which I converted into a CSV file. If you want to follow along, download the file [heights_and_weights.csv](data/heights_and_weights.csv){download="heights_and_weights.csv"}. Here's how the scatterplot looks:

```{r heights-and-weights, fig.cap="Heights and weights of 475 humans (including infants)"}
library("tidyverse")

handw <- read_csv("data/heights_and_weights.csv", col_types = "dd")

ggplot(handw, aes(height_in, weight_lbs)) + 
  geom_point(alpha = .2) +
  labs(x = "height (inches)", y = "weight (pounds)") 
```

Now, that's not quite a linear relationship. We can make it into one by log transforming each of the variables first.

```{r log-them}
handw_log <- handw |>
  mutate(hlog = log(height_in),
         wlog = log(weight_lbs))
```


```{r handw-log, echo = FALSE, fig.cap="Log transformed heights and weights."}
sumstats <- 
  handw_log |> summarize(mh = mean(hlog),
                        mw = mean(wlog),
                        sh = sd(hlog),
                        sw = sd(wlog))

hwcor <- cor(handw_log |> pull(hlog), handw_log |> pull(wlog))

ggplot(handw_log, aes(hlog, wlog)) +
  geom_point(alpha = .2) +
  labs(x = "log(height)", y = "log(weight)")
```

```{r}
#| label: secret-chunk
#| include: false
.mh <- sumstats |> pull(mh) |> round(2)
.sh <- sumstats |> pull(sh) |> round(2)
.mw <- sumstats |> pull(mw) |> round(2)
.sw <- sumstats |> pull(sw) |> round(2)
.rho <- round(hwcor, 2)
```

The fact that there is a big cluster of points in the top right tail of the cloud probably indicates that there were more adults than kids in this sample, since adults are taller and heavier.

The mean log height is `{r} .mh` (SD = `{r} .sh`), while the mean log weight is `{r} .mw` (SD = `{r} .sw`).  The correlation between log height and log weight, which we can get using the `cor()` function, is very high, `{r} .rho`.

We now have all the information we need to simulate the heights and weights of, let's say, 500 humans. But how do we get this information into `MASS::mvrnorm()`? We know the first part of the function call will be `MASS::mvrnorm(500, c(`{r} .mh`, `{r} .mw`), ...)`, but what about `Sigma`, the covariance matrix?  We know from above that $\hat{\sigma}_x = `{r} .sh`$ and $\hat{\sigma}_y = `{r} .sw`$,  and $\hat{\rho}_{xy} = `{r} .rho`$.

A covariance matrix representating `Sigma` ($\mathbf{\Sigma}$) for bivariate data has the following format:

$$
\mathbf{\Sigma} =
\begin{pmatrix}
{\sigma_x}^2                & \rho_{xy} \sigma_x \sigma_y \\
\rho_{yx} \sigma_y \sigma_x & {\sigma_y}^2 \\
\end{pmatrix}
$$

The variances (squared standard deviations, ${\sigma_x}^2$ and ${\sigma_y}^2$) are in the diagonal, and the covariances (the correlation times the two standard deviations, $\rho_{xy} \sigma_x \sigma_y$) are in the off-diagonal. It is useful to remember that the covariance is just the correlation times the product of the two standard deviations. As we saw above with the correlation matrices, there is redundant information in the table; namely, the covariance appears in the top right cell as well as the bottom left cell of the matrix.

So plugging in the values we got above, our covariance matrix should be

$$
\begin{pmatrix}
.26^2 & (.96)(.26)(.65) \\
(.96)(.65)(.26) & .65^2 \\
\end{pmatrix} =
\begin{pmatrix}
.067 & .162 \\
.162 & .423 \\
\end{pmatrix}
$$

OK, how do we form `Sigma` in R so that we can pass it to the `mvrnorm()` function? We will use the `matrix()` function, as shown below.

First let's define our covariance and store it in the variable `my_cov`.

```{r define-covariance}
my_cov <- .96 * .26 * .65
```

Now we'll use `matrix()` to define our `Sigma`, `my_Sigma`.

```{r form-matrix}
my_Sigma <- matrix(c(.26^2, my_cov, my_cov, .65^2), ncol = 2)
my_Sigma
```

```{block, type = "info"}
Confused about the `matrix()` function?

The first argument is a vector of values, which we created above using `c()`. The `ncol` argument specifies how many columns the matrix should have. There is also an `nrow` argument that you could use, but if you give it one of the dimensions, it can infer the size of the other using the length of the vector supplied as the first argument.

You can see that `matrix()` fills in the elements of the matrix column by column, rather than row by row by running the following code:

`matrix(c("a", "b", "c", "d"), ncol = 2)`

If you want to change this behavior, set the `byrow` argument to `TRUE`.

`matrix(c("a", "b", "c", "d"), ncol = 2, byrow = TRUE)`
```

Great. Now that we've got `my_Sigma`, we're ready to use `MASS::mvrnorm()`. Let's test it out by creating 6 synthetic humans.

```{r synth-peeps}
set.seed(62) # for reproducibility

# passing the *named* vector c(height = 4.11, weight = 4.74)
# for mu gives us column names in the output
log_ht_wt <- MASS::mvrnorm(6, 
                           c(height = 4.11, weight = 4.74), 
                           my_Sigma)

log_ht_wt
```

So `MASS::mvrnorm()` returns a matrix with a row for each simulated human, with the first column representing the log height and the second column representing the log weight.  But log heights and log weights are not very useful to us, so let's transform them back by using `exp()`, which is the inverse of the `log()` transform.

```{r back-transform}
exp(log_ht_wt)
```

```{r}
#| label: secret-block-2
#| include: false
.sim_h <- exp(log_ht_wt)[1, 1] |> round(2)
.ft <- floor(.sim_h / 12)
.in <- round((.sim_h - floor(.sim_h)) * 12)
.sim_w <- exp(log_ht_wt)[1, 2] |> round(2)
```

So our first simulated human is `{r} .sim_h` inches tall (about `{r} paste0(.ft, "'", .in, "\"")` or X) and weighs `{r} .sim_w` pounds (`{r} round(.sim_w / 2.2054, 2)` kg). Sounds about right! (Note also that it will generate observations outside of our original data; we'll get super tall humans, like observation 5, but at least the weight/height relationship will be preserved.)

OK, let's randomly generate a bunch of humans, transform them from log to inches and pounds, and plot them against our original data to see how we're doing.

```{r plot-together, fig.cap="Real and simulated humans."}
## simulate new humans
new_humans <- MASS::mvrnorm(500, 
                            c(height_in = 4.11, weight_lbs = 4.74),
                            my_Sigma) |>
  exp() |> # back-transform from log to inches and pounds
  as_tibble() |> # make tibble for plotting
  mutate(type = "simulated") # tag them as simulated

## combine real and simulated datasets
## handw is variable containing data from heights_and_weights.csv
alldata <- bind_rows(handw |> mutate(type = "real"), 
                     new_humans)

ggplot(alldata, aes(height_in, weight_lbs)) +
  geom_point(aes(colour = type), alpha = .1)
```

You can see that our simulated humans are much like the normal ones, except that we are creating humans outside the normal range of heights and weights.

OK, we know how to estimate correlations, but what if we wanted to predict the weight of someone given their height? This might sound like an impractical problem, but in fact, [emergency medical technicians can use this technique to get a quick estimate of people's weights in emergency situations](https://link.springer.com/article/10.1186/s12245-018-0212-9) where they need to administer drugs or procedures whose safety depends on the patient's weight, and don't have time to weigh them.


; for a multivariate distribution with more the two variables you need the means for all of the variables, their standard deviations, and all of the possible pairwise correlations. 


```{r}
narc_2 <- read_csv("data/narc_2.csv",
                   col_types = "dddd")

lm_VN <- lm(cbind(VN, GN) ~ HP + EP, data = narc_2)
summary(lm_VN)
```

